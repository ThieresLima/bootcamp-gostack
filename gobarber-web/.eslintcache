[{"/home/thieres/goStack/gobarber-web/src/App.tsx":"1","/home/thieres/goStack/gobarber-web/src/index.tsx":"2","/home/thieres/goStack/gobarber-web/src/styles/global.ts":"3","/home/thieres/goStack/gobarber-web/src/pages/SignIn/index.tsx":"4","/home/thieres/goStack/gobarber-web/src/pages/SignIn/styles.ts":"5","/home/thieres/goStack/gobarber-web/src/components/Input/styles.ts":"6","/home/thieres/goStack/gobarber-web/src/components/Input/index.tsx":"7","/home/thieres/goStack/gobarber-web/src/components/Button/index.tsx":"8","/home/thieres/goStack/gobarber-web/src/components/Button/styles.ts":"9","/home/thieres/goStack/gobarber-web/src/pages/SignUp/index.tsx":"10","/home/thieres/goStack/gobarber-web/src/pages/SignUp/styles.ts":"11","/home/thieres/goStack/gobarber-web/src/utils/getValidationErros.ts":"12","/home/thieres/goStack/gobarber-web/src/components/Tooltip/index.tsx":"13","/home/thieres/goStack/gobarber-web/src/components/Tooltip/styles.ts":"14","/home/thieres/goStack/gobarber-web/src/services/api.ts":"15","/home/thieres/goStack/gobarber-web/src/components/ToastContainer/index.tsx":"16","/home/thieres/goStack/gobarber-web/src/components/ToastContainer/styles.ts":"17","/home/thieres/goStack/gobarber-web/src/hooks/Auth.tsx":"18","/home/thieres/goStack/gobarber-web/src/hooks/Toast.tsx":"19","/home/thieres/goStack/gobarber-web/src/components/ToastContainer/Toast/styles.ts":"20","/home/thieres/goStack/gobarber-web/src/components/ToastContainer/Toast/index.tsx":"21","/home/thieres/goStack/gobarber-web/src/routes/index.tsx":"22"},{"size":351,"mtime":1608040189084,"results":"23","hashOfConfig":"24"},{"size":198,"mtime":1606157773950,"results":"25","hashOfConfig":"24"},{"size":468,"mtime":1606223229141,"results":"26","hashOfConfig":"24"},{"size":2616,"mtime":1608042467208,"results":"27","hashOfConfig":"24"},{"size":1642,"mtime":1608041968732,"results":"28","hashOfConfig":"24"},{"size":1113,"mtime":1606834140832,"results":"29","hashOfConfig":"24"},{"size":1594,"mtime":1607612301473,"results":"30","hashOfConfig":"24"},{"size":316,"mtime":1606310945328,"results":"31","hashOfConfig":"24"},{"size":381,"mtime":1606317538712,"results":"32","hashOfConfig":"24"},{"size":2030,"mtime":1608042486532,"results":"33","hashOfConfig":"24"},{"size":1643,"mtime":1608042181102,"results":"34","hashOfConfig":"24"},{"size":321,"mtime":1606513874312,"results":"35","hashOfConfig":"24"},{"size":355,"mtime":1606831226574,"results":"36","hashOfConfig":"24"},{"size":743,"mtime":1606834497900,"results":"37","hashOfConfig":"24"},{"size":116,"mtime":1607454081038,"results":"38","hashOfConfig":"24"},{"size":787,"mtime":1607976714250,"results":"39","hashOfConfig":"24"},{"size":162,"mtime":1607804363759,"results":"40","hashOfConfig":"24"},{"size":1654,"mtime":1607708683738,"results":"41","hashOfConfig":"24"},{"size":1424,"mtime":1607977059023,"results":"42","hashOfConfig":"24"},{"size":1264,"mtime":1607977350928,"results":"43","hashOfConfig":"24"},{"size":1180,"mtime":1607977398488,"results":"44","hashOfConfig":"24"},{"size":334,"mtime":1608040116188,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1grr2p0",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"59"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"59"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"59"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/thieres/goStack/gobarber-web/src/App.tsx",[],"/home/thieres/goStack/gobarber-web/src/index.tsx",[],"/home/thieres/goStack/gobarber-web/src/styles/global.ts",[],["95","96","97","98","99"],"/home/thieres/goStack/gobarber-web/src/pages/SignIn/index.tsx",["100","101"],"/home/thieres/goStack/gobarber-web/src/pages/SignIn/styles.ts",[],"/home/thieres/goStack/gobarber-web/src/components/Input/styles.ts",[],["102","103","104","105","106"],"/home/thieres/goStack/gobarber-web/src/components/Input/index.tsx",["107"],"import React, {\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n} from 'react';\n\nimport { useField } from '@unform/core';\n\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\n\nimport { Container, Error } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string; // tornando name obrigat√≥rio\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst Input: React.FC<InputProps> = ({ name, icon: Icon, ...rest }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!inputRef.current?.value);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value', // document.querySelector('input').value\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isErrored={!!error} isFilled={isFilled} isFocused={isFocused}>\n      {Icon && <Icon size={20} />}\n      <input\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        ref={inputRef}\n        {...rest}\n      />\n\n      {error && (\n        <Error title={error}>\n          <FiAlertCircle color=\"#c53030\" size={20} />\n        </Error>\n      )}\n    </Container>\n  );\n};\n\nexport default Input;\n","/home/thieres/goStack/gobarber-web/src/components/Button/index.tsx",[],"/home/thieres/goStack/gobarber-web/src/components/Button/styles.ts",[],"/home/thieres/goStack/gobarber-web/src/pages/SignUp/index.tsx",[],"/home/thieres/goStack/gobarber-web/src/pages/SignUp/styles.ts",[],"/home/thieres/goStack/gobarber-web/src/utils/getValidationErros.ts",[],"/home/thieres/goStack/gobarber-web/src/components/Tooltip/index.tsx",[],"/home/thieres/goStack/gobarber-web/src/components/Tooltip/styles.ts",[],"/home/thieres/goStack/gobarber-web/src/services/api.ts",[],"/home/thieres/goStack/gobarber-web/src/components/ToastContainer/index.tsx",[],"/home/thieres/goStack/gobarber-web/src/components/ToastContainer/styles.ts",[],"/home/thieres/goStack/gobarber-web/src/hooks/Auth.tsx",["108","109"],"import React, { createContext, useCallback, useState, useContext } from 'react';\n\nimport api from '../services/api';\n\ninterface AuthState {\n  token: string;\n  user: object;\n}\n\ninterface SignInCredentials {\n  email: string;\n  password: string;\n}\n\ninterface AuthContextData {\n  user: object;\n  signIn(credentials: SignInCredentials): Promise<void>;\n  signOut(): void;\n}\n\nconst AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\nexport const AuthProvider: React.FC = ({ children }) => {\n  const [data, setData] = useState<AuthState>(() => {\n    const token = localStorage.getItem('@GoBarber:token');\n    const user = localStorage.getItem('@GoBarber:user');\n\n    if (token && user) {\n      return { token, user: JSON.parse(user) };\n    }\n\n    return {} as AuthState;\n  });\n\n  const signIn = useCallback(async ({ email, password }) => {\n    const response = await api.post('sessions', {\n      email,\n      password,\n    });\n\n    const { token, user } = response.data;\n    localStorage.setItem('@GoBarber:token', token);\n    localStorage.setItem('@GoBarber:user', JSON.stringify(user));\n\n    setData({ token, user });\n  }, []);\n\n  const signOut = useCallback(() => {\n    localStorage.removeItem('@GoBarber:token');\n    localStorage.removeItem('@GoBarber:user');\n\n    setData({} as AuthState);\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user: data.user, signIn, signOut }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport function useAuth(): AuthContextData {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  return context;\n}\n","/home/thieres/goStack/gobarber-web/src/hooks/Toast.tsx",[],"/home/thieres/goStack/gobarber-web/src/components/ToastContainer/Toast/styles.ts",[],"/home/thieres/goStack/gobarber-web/src/components/ToastContainer/Toast/index.tsx",["110"],"import React, { useEffect } from 'react';\nimport {\n  FiAlertCircle,\n  FiCheckCircle,\n  FiInfo,\n  FiXCircle,\n} from 'react-icons/fi';\n\nimport { ToastMessage, useToast } from '../../../hooks/Toast';\n\nimport { Container } from './styles';\n\ninterface ToastProps {\n  message: ToastMessage;\n  style: object;\n}\n\nconst icons = {\n  info: <FiInfo size={24} />,\n  success: <FiCheckCircle size={24} />,\n  error: <FiAlertCircle size={24} />,\n};\n\nconst Toast: React.FC<ToastProps> = ({ message, style }) => {\n  const { removeToast } = useToast();\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      removeToast(message.id);\n    }, 3000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [removeToast, message.id]);\n\n  return (\n    <Container\n      style={style}\n      type={message.type}\n      hasDescription={!!message.description}\n    >\n      {icons[message.type || 'info']}\n\n      <div>\n        <strong>{message.title}</strong>\n        {message.description && <p>{message.description}</p>}\n      </div>\n\n      <button onClick={() => removeToast(message.id)} type=\"button\">\n        <FiXCircle size={18} />\n      </button>\n    </Container>\n  );\n};\n\nexport default Toast;\n","/home/thieres/goStack/gobarber-web/src/routes/index.tsx",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":28,"column":11,"nodeType":"123","messageId":"124","endLine":28,"endColumn":15},{"ruleId":"121","severity":1,"message":"125","line":29,"column":21,"nodeType":"123","messageId":"124","endLine":29,"endColumn":32},{"ruleId":"111","replacedBy":"126"},{"ruleId":"113","replacedBy":"127"},{"ruleId":"115","replacedBy":"128"},{"ruleId":"117","replacedBy":"129"},{"ruleId":"119","replacedBy":"130"},{"ruleId":"121","severity":1,"message":"131","line":25,"column":22,"nodeType":"123","messageId":"124","endLine":25,"endColumn":34},{"ruleId":"132","severity":1,"message":"133","line":7,"column":9,"nodeType":"134","messageId":"135","endLine":7,"endColumn":15},{"ruleId":"132","severity":1,"message":"133","line":16,"column":9,"nodeType":"134","messageId":"135","endLine":16,"endColumn":15},{"ruleId":"132","severity":1,"message":"133","line":15,"column":10,"nodeType":"134","messageId":"135","endLine":15,"endColumn":16},"lines-around-directive",["136"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'removeToast' is assigned a value but never used.",["136"],[],[],[],[],"'defaultValue' is assigned a value but never used.","@typescript-eslint/ban-types","Don't use `object` as a type. The `object` type is currently hard to use ([see this issue](https://github.com/microsoft/TypeScript/issues/21732)).\nConsider using `Record<string, unknown>` instead, as it allows you to more easily inspect and use the keys.","TSObjectKeyword","bannedTypeMessage","padding-line-between-statements"]